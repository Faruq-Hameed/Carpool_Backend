import { type Request, type Response } from 'express';
import RideService from "../services/RideService"
// import RideService from '@//services/RideService'


class RideController {
    // Create a ride
    static async createRide(req: Request, res: Response): Promise<void> {
        try {
            const rideData = req.body;
            const newRide = await RideService.createRide(rideData);
            res.status(201).json(newRide);
        } catch (error) {
            res.status(500).json({ error: 'Failed to create ride' });
        }
    }

    // Get all rides
    static async getAllRides(req: Request, res: Response): Promise<void> {
        try {
            const rides = await RideService.getAllRides();
            res.status(200).json(rides);
        } catch (error) {
            res.status(500).json({ error: 'Failed to get rides' });
        }
    }

    // Get ride by ID
    static async getRideById(req: Request, res: Response): Promise<void> {
        try {
            const { rideId } = req.params;
            const ride = await RideService.getRideById(rideId);
            res.status(200).json(ride);
        } catch (error) {
            res.status(404).json({ error: 'Ride not found' });
        }
    }

    // Update a ride by ID
    static async updateRide(req: Request, res: Response): Promise<void> {
        try {
            const { rideId } = req.params;
            const updateData = req.body;
            const updatedRide = await RideService.updateRide(rideId, updateData);
            res.status(200).json(updatedRide);
        } catch (error) {
            res.status(404).json({ error: 'Ride not found or update failed' });
        }
    }

    // Delete a ride by ID
    static async deleteRide(req: Request, res: Response): Promise<void> {
        try {
            const { rideId } = req.params;
            await RideService.deleteRide(rideId);
            res.status(204).send();
        } catch (error) {
            res.status(404).json({ error: 'Ride not found or delete failed' });
        }
    }
}

export default RideController;
